static const char* literals="print('testing scanner')\n\
local function dostring (x) return assert(loadstring(x))() end\n\
dostring(\"x = 'a\\0a'\")\n\
assert(x == 'a\\0a' and string.len(x) == 3)\n\
assert('\\\"\\'\\\\' == [[\"'\\]])\n\
assert(string.find(\"\\a\\b\\f\\n\\r\\t\\v\", \"^%c%c%c%c%c%c%c$\"))\n\
assert(\"\\09912\" == 'c12')\n\
assert(\"\\99ab\" == 'cab')\n\
assert(\"\\099\" == '\\99')\n\
assert(\"\\099\\n\" == 'c\\10')\n\
assert('\\0\\0\\0alo' == '\\0' .. '\\0\\0' .. 'alo')\n\
assert(010 .. 020 .. -030 == \"1020-30\")\n\
var = string.rep('a', 15000)\n\
prog = string.format(\"%s = 5\", var)\n\
dostring(prog)\n\
assert(_G[var] == 5)\n\
var = nil\n\
print('+')\n\
assert(\"\\t\" == [[	]])\n\
assert([[ [ ]] ~= [[ ] ]])\n\
b = \"001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789\"\n\
assert(string.len(b) == 960)\n\
prog = [=[\n\
print('+')\n\
a1 = [[\"isto e' um string com várias 'aspas'\"]]\n\
a2 = \"'aspas'\"\n\
assert(string.find(a1, a2) == 31)\n\
print('+')\n\
a1 = [==[temp = [[um valor qualquer]]; ]==]\n\
assert(loadstring(a1))()\n\
assert(temp == 'um valor qualquer')\n\
b = \"001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789001234567890123456789012345678901234567891234567890123456789012345678901234567890012345678901234567890123456789012345678912345678901234567890123456789012345678900123456789012345678901234567890123456789123456789012345678901234567890123456789\"\n\
assert(string.len(b) == 960)\n\
print('+')\n\
a = [[00123456789012345678901234567890123456789123456789012345678901234567890123456789\n\
00123456789012345678901234567890123456789123456789012345678901234567890123456789\n\
00123456789012345678901234567890123456789123456789012345678901234567890123456789\n\
00123456789012345678901234567890123456789123456789012345678901234567890123456789\n\
00123456789012345678901234567890123456789123456789012345678901234567890123456789\n\
00123456789012345678901234567890123456789123456789012345678901234567890123456789\n\
00123456789012345678901234567890123456789123456789012345678901234567890123456789\n\
00123456789012345678901234567890123456789123456789012345678901234567890123456789\n\
00123456789012345678901234567890123456789123456789012345678901234567890123456789\n\
00123456789012345678901234567890123456789123456789012345678901234567890123456789\n\
00123456789012345678901234567890123456789123456789012345678901234567890123456789\n\
00123456789012345678901234567890123456789123456789012345678901234567890123456789\n\
00123456789012345678901234567890123456789123456789012345678901234567890123456789\n\
00123456789012345678901234567890123456789123456789012345678901234567890123456789\n\
00123456789012345678901234567890123456789123456789012345678901234567890123456789\n\
00123456789012345678901234567890123456789123456789012345678901234567890123456789\n\
00123456789012345678901234567890123456789123456789012345678901234567890123456789\n\
00123456789012345678901234567890123456789123456789012345678901234567890123456789\n\
00123456789012345678901234567890123456789123456789012345678901234567890123456789\n\
00123456789012345678901234567890123456789123456789012345678901234567890123456789\n\
00123456789012345678901234567890123456789123456789012345678901234567890123456789\n\
00123456789012345678901234567890123456789123456789012345678901234567890123456789\n\
00123456789012345678901234567890123456789123456789012345678901234567890123456789\n\
]]\n\
assert(string.len(a) == 1863)\n\
assert(string.sub(a, 1, 40) == string.sub(b, 1, 40))\n\
x = 1\n\
]=]\n\
print('+')\n\
x = nil\n\
dostring(prog)\n\
assert(x)\n\
prog = nil\n\
a = nil\n\
b = nil\n\
a = [==[]=]==]\n\
assert(a == \"]=\")\n\
a = [==[[===[[=[]]=][====[]]===]===]==]\n\
assert(a == \"[===[[=[]]=][====[]]===]===\")\n\
a = [====[[===[[=[]]=][====[]]===]===]====]\n\
assert(a == \"[===[[=[]]=][====[]]===]===\")\n\
a = [=[]]]]]]]]]=]\n\
assert(a == \"]]]]]]]]\")\n\
print('  OK')";
